//
// Generated file, do not edit! Created by opp_msgtool 6.1 from FsrMessages.msg.
//

#ifndef __FSRMESSAGES_M_H
#define __FSRMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class FsrMessage;
#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address

/**
 * Class generated from <tt>FsrMessages.msg:6</tt> by opp_msgtool.
 * <pre>
 * class FsrMessage extends inet::FieldsChunk
 * {
 *     unsigned int sequenceNumber;      // incremental sequence number
 *     int scopeLevel;          // which fisheye scope (0,1,2)
 *     inet::L3Address origin;        // originatorâ€™s address
 *     inet::L3Address neighbors[];   // dynamic array of one-hop neighbors
 * }
 * </pre>
 */
class FsrMessage : public ::inet::FieldsChunk
{
  protected:
    unsigned int sequenceNumber = 0;
    int scopeLevel = 0;
    inet::L3Address origin;
    inet::L3Address *neighbors = nullptr;
    size_t neighbors_arraysize = 0;

  private:
    void copy(const FsrMessage& other);

  protected:
    bool operator==(const FsrMessage&) = delete;

  public:
    FsrMessage();
    FsrMessage(const FsrMessage& other);
    virtual ~FsrMessage();
    FsrMessage& operator=(const FsrMessage& other);
    virtual FsrMessage *dup() const override {return new FsrMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual unsigned int getSequenceNumber() const;
    virtual void setSequenceNumber(unsigned int sequenceNumber);

    virtual int getScopeLevel() const;
    virtual void setScopeLevel(int scopeLevel);

    virtual const inet::L3Address& getOrigin() const;
    virtual inet::L3Address& getOriginForUpdate() { handleChange();return const_cast<inet::L3Address&>(const_cast<FsrMessage*>(this)->getOrigin());}
    virtual void setOrigin(const inet::L3Address& origin);

    virtual void setNeighborsArraySize(size_t size);
    virtual size_t getNeighborsArraySize() const;
    virtual const inet::L3Address& getNeighbors(size_t k) const;
    virtual inet::L3Address& getNeighborsForUpdate(size_t k) { handleChange();return const_cast<inet::L3Address&>(const_cast<FsrMessage*>(this)->getNeighbors(k));}
    virtual void setNeighbors(size_t k, const inet::L3Address& neighbors);
    virtual void insertNeighbors(size_t k, const inet::L3Address& neighbors);
    [[deprecated]] void insertNeighbors(const inet::L3Address& neighbors) {appendNeighbors(neighbors);}
    virtual void appendNeighbors(const inet::L3Address& neighbors);
    virtual void eraseNeighbors(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FsrMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FsrMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline FsrMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<FsrMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __FSRMESSAGES_M_H

